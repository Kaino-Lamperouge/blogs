(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{292:function(_,v,t){"use strict";t.r(v);var n=t(14),o=Object(n.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"python中下划线的5种含义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#python中下划线的5种含义"}},[_._v("#")]),_._v(" Python中下划线的5种含义")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("单前导下划线 "),v("code",[_._v("_var")]),_._v("\n以单个下划线开头的变量或方法仅供内部使用\n“私有”和“公共”变量之间的区别")])]),_._v(" "),v("li",[v("p",[_._v("单末尾下划线 "),v("code",[_._v("var_")]),_._v("\n避免与 "),v("code",[_._v("Python")]),_._v(" 关键字产生命名冲突")])]),_._v(" "),v("li",[v("p",[_._v("双前导下划线 "),v("code",[_._v("__var")]),_._v("\n双下划线前缀会导致 "),v("code",[_._v("Python")]),_._v(" 解释器重写属性名称，以避免子类中的命名冲突\n这也叫做名称修饰（ "),v("code",[_._v("name mangling")]),_._v(" ） - 解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突")])]),_._v(" "),v("li",[v("p",[_._v("双前导和双末尾下划线 "),v("code",[_._v("_var_")]),_._v("\n使得一个对象可以被调用")])]),_._v(" "),v("li",[v("p",[_._v("单下划线 "),v("code",[_._v("_")]),_._v("\n单个独立下划线是用作一个名字，来表示某个变量是临时的或无关紧要的")])])]),_._v(" "),v("p",[_._v("不需要访问正在运行的索引，可以使用“_”来表示它只是一个临时值")]),_._v(" "),v("img",{attrs:{src:_.$withBase("/images/python.png"),alt:""}})])}),[],!1,null,null,null);v.default=o.exports}}]);